/**
 * üîë PROJECT MANAGMENT PAGE (CTV Portal)
 *
 * @author Winland Team
 * @route /
 * @features Auto Dark Mode, JWT Auth (mock), Sales Chart, Responsive Full HD, Project Map
 * @date 29-10-2025
 */

"use client";

import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import {
    Home,
    Sun,
    Moon,
    LogOut,
    LandPlot,
    Search,
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { AnimatedBottomNavigation } from "@/components/AnimatedBottomNavigation";
import { useNavigation } from "@/hooks/useNavigation";
import { useDeviceDetect } from "@/hooks/useDeviceDetect";
import { useTheme } from "@/hooks/useTheme";
import UnitModal from "@/components/UnitModal";
import DepositModal from "@/components/DepositModal";
import ReservedModal from "@/components/ReservedModal";
import { formatCurrency } from "@/lib/utils";
import { toastNotification } from '@/app/utils/toastNotification';
import { ToastContainer } from 'react-toastify';

/* ----------------------------- TYPES ----------------------------- */
type UnitStatus = "available" | "reserved" | "sold" | "booking" | "deposit";
const statuses: UnitStatus[] = ["available", "reserved", "sold", "booking", "deposit"];
type Unit = {
    id: string;
    project?: string;
    code: string;
    area: string;
    price: number;
    numRoom: number;
    numWC: number;
    status: UnitStatus;
    commission: number;
    depositMoney?: number;
    reservedMoney?: number;
    floor: number;
    view: string;
    direction?: string;
    customerName?: string;
    reservedUntil?: string;
    image: string[];
    information: string;
    legalDocument?: string;
};

type Block = {
    id: string;
    name: string;
    units: Unit[];
};

// Price and area templates
const areas = ["120m2", "150m2", "185m2", "210m2", "100m2"];
const direction = ["ƒê√¥ng", "T√¢y", "Nam", "B·∫Øc", "ƒê√¥ng Nam", "T√¢y Nam", "ƒê√¥ng B·∫Øc", "T√¢y B·∫Øc"];
const view = ["City view", "River view", "Park view", "Pool view", "Lake view", "Golf view", "Skyline view"];
const prices = [6200000000, 7850000000, 8532000000, 9100000000, 10250000000, 5500000000];
const numRooms = [2, 3, 4, 5];
const numWCs = [1, 2, 3];
const information = ["CƒÉn h·ªô thi·∫øt k·∫ø hi·ªán ƒë·∫°i v·ªõi kh√¥ng gian m·ªü, ban c√¥ng r·ªông v√† √°nh s√°ng t·ª± nhi√™n chan h√≤a. V·ªã tr√≠ thu·∫≠n ti·ªán g·∫ßn khu ti·ªán √≠ch, tr∆∞·ªùng h·ªçc v√† trung t√¢m th∆∞∆°ng m·∫°i.",
    "CƒÉn h·ªô n·∫±m trong khu d√¢n c∆∞ y√™n tƒ©nh, c√≥ view s√¥ng tho√°ng m√°t, ph√π h·ª£p cho gia ƒë√¨nh nh·ªè. N·ªôi th·∫•t ƒë∆∞·ª£c ho√†n thi·ªán cao c·∫•p, ph√≤ng kh√°ch th√¥ng v·ªõi ban c√¥ng gi√∫p t·∫≠n d·ª•ng t·ªëi ƒëa √°nh s√°ng t·ª± nhi√™n.",
    "CƒÉn h·ªô n·ªïi b·∫≠t v·ªõi thi·∫øt k·∫ø sang tr·ªçng, c√≥ s√¢n v∆∞·ªùn ri√™ng v√† kh√¥ng gian sinh ho·∫°t ngo√†i tr·ªùi. Ph√π h·ª£p v·ªõi gia ƒë√¨nh ƒëa th·∫ø h·ªá, k·∫øt n·ªëi ti·ªán √≠ch n·ªôi khu nh∆∞ h·ªì b∆°i, c√¥ng vi√™n, khu th·ªÉ thao.",
]
const getRandom = <T,>(arr: T[]): T => arr[Math.floor(Math.random() * arr.length)];

// Generate apartment images (3-5 images per unit)
const generateUnitImage = (index: number): string[] => {
    const apartmentImages = [
        "https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1560448204-61dc36dc98c8?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1560448075-cbc16bb4af8e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1560448075-bb485b067938?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
        "https://images.unsplash.com/photo-1560448075-bb485b067938?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
    ];

    // Generate 3-5 images randomly
    const imageCount = Math.floor(Math.random() * 3) + 3; // Random number between 3-5
    const startIndex = index % (apartmentImages.length - imageCount + 1);

    return apartmentImages.slice(startIndex, startIndex + imageCount);
};

/* ----------------------------- MOCK DATA ----------------------------- */
// Generate mock data
export const blocks: Block[] = Array.from({ length: 4 }, (_, i) => {
    const blockName = `LK${i + 1}`;
    const numFloors = Math.floor(Math.random() * 3) + 6;
    const numUnits = numFloors * 5; // 5 units per floor

    const units: Unit[] = Array.from({ length: numUnits }, (_, j) => {
        const floor = Math.floor(j / 5) + 5; // Sequential floors starting from 5
        const unitOnFloor = (j % 5) + 1; // Unit number on floor (1-5)
        const floorUnit = String(floor).padStart(2, "0") + String(unitOnFloor).padStart(2, "0");
        const id = `${blockName.toLowerCase()}-${floorUnit}`;
        const price = getRandom(prices);
        return {
            id,
            project: "L√™ VƒÉn Thi√™m Luxury",
            code: `${blockName}-${floorUnit}`,
            area: getRandom(areas),
            price: price,
            numRoom: getRandom(numRooms),
            numWC: getRandom(numWCs),
            status: getRandom(statuses),
            commission: Math.floor(Math.random() * 50000000) + 25000000,
            floor: floor,
            direction: getRandom(direction),
            view: getRandom(view),
            image: generateUnitImage(j),
            information: getRandom(information),
            depositMoney: price * 0.01,
            reservedMoney: 10000000,
        };
    });

    return {
        id: blockName.toLowerCase(),
        name: blockName,
        units,
    };
});

const statusProperty: Record<UnitStatus, { dotColor: string; bgClass: string; label: string }> = {
    available: { dotColor: "bg-green-600", bgClass: "bg-green-600", label: "ƒêang m·ªü b√°n" },
    reserved: { dotColor: "bg-yellow-600", bgClass: "bg-yellow-600", label: "ƒêang c√≥ ƒë·∫∑t ch·ªó" },
    booking: { dotColor: "bg-blue-600", bgClass: "bg-blue-600", label: "ƒêang c√≥ booking" },
    deposit: { dotColor: "bg-purple-600", bgClass: "bg-purple-600", label: "ƒê√£ c·ªçc ti·ªÅn" },
    sold: { dotColor: "bg-red-600", bgClass: "bg-red-600", label: "ƒê√£ b√°n" },
};

/* Motion variants */
const cardVariants = {
    hidden: { opacity: 0, scale: 0.96 },
    visible: { opacity: 1, scale: 1 },
    hover: { scale: 1.03 },
};
const containerVariants = {
    hidden: {},
    visible: { transition: { staggerChildren: 0.03 } },
};

function LegendItem({ color, label, isDark }: { color: string; label: string; isDark: boolean }) {
    return (
        <div className="flex items-center gap-2">
            <span className={`inline-block w-3 h-3 rounded-full ${color}`} aria-hidden />
            <span className={`text-sm ${isDark ? "text-white" : "text-slate-700"}`}>{label}</span>
        </div>
    );
}

/* ----------------------------- COMPONENT ----------------------------- */
export default function DashboardScreen(): JSX.Element {
    const router = useRouter();
    const { activeNav, setActiveNav } = useNavigation();
    const deviceInfo = useDeviceDetect();
    const { isDark, toggleTheme } = useTheme();
    const [token, setToken] = useState<string | null>(null);
    const [userData, setUserData] = useState<any>(null);
    const [searchTerm, setSearchTerm] = useState("");
    const [selectedUnit, setSelectedUnit] = useState<any>(null);
    const [showDepositModal, setShowDepositModal] = useState(false);
    const [showReservedModal, setShowReservedModal] = useState(false);

    // Mock JWT login
    useEffect(() => {
        async function mockLogin() {
            try {
                const res = await fetch("/api/mock-login");
                const data = await res.json();
                setToken(data.token);
                setUserData(data.user);
            } catch (err) {
                console.error("JWT Mock Login Failed:", err);
            }
        }
        mockLogin();
    }, []);

    // Combine all units into one array
    const allUnits = blocks.flatMap((block) => block.units);

    // Filter by search input
    const filteredUnits = allUnits.filter((unit) =>
        unit.code.toLowerCase().includes(searchTerm.toLowerCase())
    );

    // Greeting by time
    const getGreeting = () => {
        const hour = new Date().getHours();
        if (hour < 12) return "Ch√†o bu·ªïi s√°ng";
        if (hour < 18) return "Ch√†o bu·ªïi chi·ªÅu";
        return "Ch√†o bu·ªïi t·ªëi";
    };

    const handleLogout = () => {
        localStorage.removeItem("jwt_token");
        setToken(null);
        setUserData(null);
        router.push("/login");
    };

    // Helper function to handle unit click based on status
    const handleUnitClick = (unit: Unit) => {
        if (unit.status === "available") {
            setSelectedUnit(unit);
        } else if (unit.status === "booking") {
            toastNotification.info("CƒÉn n√†y ƒëang trong qu√° tr√¨nh booking");
        } else if (unit.status === "deposit") {
            toastNotification.warning("CƒÉn n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t c·ªçc");
        } else if (unit.status === "reserved") {
            toastNotification.warning("CƒÉn n√†y ƒëang c√≥ ng∆∞·ªùi gi·ªØ ch·ªó");
        } else if (unit.status === "sold") {
            toastNotification.error("CƒÉn n√†y ƒë√£ ƒë∆∞·ª£c b√°n");
        }
    };

    // Helper function to get responsive classes based on device type
    const getResponsiveClasses = () => {
        if (deviceInfo.isMobile) {
            return {
                headerPadding: "px-4 py-4",
                titleSize: "text-lg",
                gridCols: "grid-cols-2",
                cardPadding: "p-3",
                cardShape: "aspect-square", // Square cards for mobile
                legendFlex: "flex-wrap",
            };
        } else if (deviceInfo.isTablet) {
            return {
                headerPadding: "px-6 py-5",
                titleSize: "text-xl",
                gridCols: "grid-cols-3",
                cardPadding: "p-4",
                cardShape: "", // Regular cards for tablet
                legendFlex: "flex-wrap",
            };
        } else {
            return {
                headerPadding: "px-6 py-6",
                titleSize: "text-xl",
                gridCols: "grid-cols-4 xl:grid-cols-5",
                cardPadding: "p-3",
                cardShape: "", // Regular cards for desktop
                legendFlex: "flex-wrap",
            };
        }
    };

    const responsiveClasses = getResponsiveClasses();

    return (
        <div
            className={`min-h-screen flex flex-col transition-colors duration-500 ${isDark ? "bg-[#0C1125] text-white" : "bg-gray-50 text-slate-900"
                }`}
        >
            {/* üîπ HEADER */}
            <header
                className={`rounded-b-3xl shadow-md ${isDark ? "bg-[#10182F]" : "bg-[#041b40] text-white"
                    }`}
            >
                <div className={`max-w-[1500px] mx-auto ${responsiveClasses.headerPadding} flex items-center justify-between`}>
                    <h1 className={`${responsiveClasses.titleSize} font-semibold ${deviceInfo.isMobile ? "text-center" : ""}`}>
                        {deviceInfo.isMobile ? "CTV Winland" : "C·ªông T√°c Vi√™n B·∫•t ƒê·ªông S·∫£n Winland"}
                    </h1>
                    <div className="flex items-center gap-3">
                        <button
                            onClick={toggleTheme}
                            className="flex items-center gap-2 px-4 py-2 rounded-md border border-white/10 hover:bg-white/10 transition"
                        >
                            {isDark ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
                        </button>
                        <button
                            onClick={handleLogout}
                            className="flex items-center gap-2 px-4 py-2 rounded-md border border-white/10 hover:bg-white/10 transition"
                        >
                            <LogOut className="w-5 h-5" />
                        </button>
                    </div>
                </div>
            </header>

            {/* üîπ MAIN */}
            <main className="flex-1 w-full">
                <div className="max-w-[1500px] mx-auto px-6 py-5 space-y-8">
                    {/* Greeting Section */}
                    <motion.section
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5, delay: 0.1 }}
                        className={`rounded-3xl ${responsiveClasses.cardPadding} shadow-md hover:shadow-xl transition ${isDark ? "bg-[#1B2342]" : "bg-white"
                            }`}
                    >
                        <div className="flex items-center gap-4">
                            <div className={`${deviceInfo.isMobile ? "w-8 h-8" : "w-12 h-12"} rounded-full overflow-hidden bg-gradient-to-br from-[#1436cc]/80 to-[#142985]/50 flex items-center justify-center`}>
                                <Home className={`${deviceInfo.isMobile ? "w-4 h-4" : "w-6 h-6"} text-white`} />
                            </div>
                            <div>
                                <p className="text-sm opacity-70 mb-1">{getGreeting()}</p>
                                <p className="text-lg font-semibold">Danh s√°ch cƒÉn h·ªô</p>
                                <p className="text-sm opacity-80">Ch·ªçn cƒÉn h·ªô ƒë·ªÉ xem chi ti·∫øt v√† th·ª±c hi·ªán giao d·ªãch</p>
                            </div>
                        </div>
                    </motion.section>

                    {/* üîç Search Bar */}
                    <div className="relative">
                        <div
                            className={`flex items-center gap-2 border rounded-xl px-4 py-2 shadow-sm ${isDark
                                ? "bg-[#1B2342] border-gray-600 text-white"
                                : "bg-white border-gray-200"
                                }`}
                        >
                            <Search size={18} className={`${isDark ? "text-gray-300" : "text-gray-500"}`} />
                            <input
                                type="text"
                                placeholder="Nh·∫≠p m√£ cƒÉn h·ªô"
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className={`w-full focus:outline-none bg-transparent ${isDark
                                    ? "text-white placeholder-gray-400"
                                    : "text-slate-800 placeholder-gray-500"
                                    }`}
                            />
                        </div>

                        {/* Search Results Dropdown */}
                        {searchTerm && (
                            <motion.div
                                initial={{ opacity: 0, y: -5 }}
                                animate={{ opacity: 1, y: 0 }}
                                className={`absolute top-[110%] left-0 w-full rounded-xl border mt-1 shadow-lg overflow-hidden z-50 ${isDark ? "bg-[#1B2342] border-gray-700" : "bg-white border-gray-200"
                                    }`}
                            >
                                {filteredUnits.length > 0 ? (
                                    <div className="max-h-80 overflow-y-auto">
                                        {filteredUnits.map((unit) => {
                                            const status = statusProperty[unit.status];
                                            return (
                                                <div
                                                    key={unit.id}
                                                    onClick={() => handleUnitClick(unit)}
                                                    className={`flex justify-between items-center px-4 py-2 ${unit.status === "available" ? "cursor-pointer" : "cursor-not-allowed opacity-75"} border-b last:border-0 ${isDark
                                                        ? "hover:bg-gray-700 border-gray-600 text-white"
                                                        : "hover:bg-gray-50 border-gray-200 text-slate-800"
                                                        }`}
                                                >
                                                    <span>{unit.code}</span>
                                                    <span
                                                        className={`text-xs px-2 py-1 rounded-full border text-white ${status.dotColor}`}
                                                    >
                                                        {status.label}
                                                    </span>
                                                </div>
                                            );
                                        })}
                                        {filteredUnits.length > 10 && (
                                            <div className={`px-4 py-2 text-xs text-center ${isDark ? "text-gray-400" : "text-gray-500"} border-t`}>
                                                {filteredUnits.length} k·∫øt qu·∫£ t√¨m th·∫•y. Cu·ªôn ƒë·ªÉ xem th√™m.
                                            </div>
                                        )}
                                    </div>
                                ) : (
                                    <div className={`px-4 py-2 text-sm ${isDark ? "text-gray-300" : "text-gray-500"}`}>Kh√¥ng t√¨m th·∫•y cƒÉn h·ªô</div>
                                )}
                            </motion.div>
                        )}
                    </div>

                    {/* Project Map */}
                    <section>
                        <motion.section
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.5, delay: 0.1 }}
                            className={`rounded-3xl ${responsiveClasses.cardPadding} shadow-md hover:shadow-xl transition ${isDark ? "bg-[#1B2342]" : "bg-white"
                                }`}
                        >
                            <div>
                                <div className="flex items-center gap-4 mb-4">
                                    <div>
                                        <p className="text-lg font-semibold mb-1">D·ª± √Ån: {blocks[0]?.units[0]?.project || "Ch∆∞a c√≥ d·ª± √°n n√†y"}</p>
                                        <p className="text-sm opacity-80">Danh s√°ch c√°c block: {blocks.map(block => block.name).join(', ')}</p>
                                    </div>
                                </div>
                                <div className={`flex ${responsiveClasses.legendFlex} items-center gap-4 text-sm`}>
                                    <LegendItem color="bg-green-600" label="ƒêang m·ªü b√°n" isDark={isDark} />
                                    <LegendItem color="bg-yellow-600" label="ƒêang c√≥ ƒë·∫∑t ch·ªó" isDark={isDark} />
                                    <LegendItem color="bg-blue-600" label="ƒêang c√≥ booking" isDark={isDark} />
                                    <LegendItem color="bg-purple-600" label="ƒê√£ c·ªçc ti·ªÅn" isDark={isDark} />
                                    <LegendItem color="bg-red-600" label="ƒê√£ b√°n" isDark={isDark} />
                                </div>
                            </div>
                        </motion.section>

                        <AnimatePresence>
                            {blocks.map((block) => (
                                <section key={block.id} className="space-y-4 mb-7 mt-8">
                                    <div className="w-full flex justify-center">
                                        <div
                                            className={`${isDark ? "bg-[#1B2342]" : "bg-white/70"
                                                } ${deviceInfo.isMobile ? "text-lg" : "text-2xl"} backdrop-blur-sm rounded-xl px-40 py-3 text-center font-medium shadow-sm max-w-[1000px]`}
                                        >
                                            {block.name}
                                        </div>
                                    </div>

                                    <motion.div
                                        initial="hidden"
                                        animate="visible"
                                        variants={containerVariants}
                                        className={`grid ${responsiveClasses.gridCols} gap-4`}
                                    >
                                        {block.units.map((unit) => {
                                            const status = statusProperty[unit.status];
                                            return (
                                                <motion.article
                                                    key={unit.id}
                                                    className="relative"
                                                    variants={cardVariants}
                                                    initial="hidden"
                                                    animate="visible"
                                                    whileHover="hover"
                                                    onClick={() => handleUnitClick(unit)}
                                                >
                                                    <div
                                                        className={`${deviceInfo.isMobile ? "w-50%" : "w-auto"} rounded-xl shadow-sm text-white ${responsiveClasses.cardPadding} ${responsiveClasses.cardShape} flex flex-col items-center justify-center gap-2 min-h-[88px] ${status.bgClass}`}
                                                    >
                                                        <div className={`${deviceInfo.isMobile ? "text-lg" : "text-2xl"} font-semibold`}>{unit.code}</div>
                                                        {/* üîπ Badge hi·ªÉn th·ªã tr·∫°ng th√°i */}
                                                        <div className="w-full flex justify-center">
                                                            <span
                                                                className={`text-[10px] px-2 py-0.5 rounded-full bg-white/25 backdrop-blur-sm`}
                                                            >
                                                                {status.label}
                                                            </span>
                                                        </div>
                                                        <div className="grid grid-cols-2 gap-1 w-full text-center">
                                                            <div className={` ${deviceInfo.isMobile ? "text-xs" : "text-lg"} opacity-90`}>{unit.area}</div>
                                                            <div className={` ${deviceInfo.isMobile ? "text-xs" : "text-lg"} opacity-90`}>{formatCurrency(unit.price)}</div>
                                                            <div className={` ${deviceInfo.isMobile ? "text-xs" : "text-lg"} opacity-90`}>PN: {unit.numRoom}</div>
                                                            <div className={` ${deviceInfo.isMobile ? "text-xs" : "text-lg"} opacity-90`}>WC: {unit.numWC}</div>
                                                        </div>
                                                    </div>
                                                </motion.article>
                                            );
                                        })}
                                    </motion.div>
                                </section>
                            ))}
                        </AnimatePresence>
                    </section>
                </div>
            </main>

            {/* üîπ FOOTER */}
            <footer
                className={`text-center text-sm py-4 ${isDark
                    ? "bg-[#10182F] text-slate-400"
                    : "bg-white text-slate-500 border-t"
                    }`}
            >
                ¬© 2025 <span className="font-semibold">B·∫•t ƒê·ªông S·∫£n Winland</span>. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
            </footer>

            <AnimatedBottomNavigation
                activeNav={activeNav}
                setActiveNav={setActiveNav}
                darkMode={isDark}
            />
            {selectedUnit && !showDepositModal && !showReservedModal && (
                <UnitModal
                    unit={selectedUnit}
                    onClose={() => setSelectedUnit(null)}
                    onDeposit={() => {
                        setShowDepositModal(true);
                    }}
                    onReserved={() => {
                        setShowReservedModal(true);
                    }}
                />
            )}
            {selectedUnit && showDepositModal && (
                <DepositModal
                    unit={selectedUnit}
                    onClose={() => {
                        setSelectedUnit(null);
                        setShowDepositModal(false);
                    }}
                />
            )}
            {selectedUnit && showReservedModal && (
                <ReservedModal
                    unit={selectedUnit}
                    onClose={() => {
                        setSelectedUnit(null);
                        setShowReservedModal(false);
                    }}
                />
            )}
            <ToastContainer />
        </div>
    );
}